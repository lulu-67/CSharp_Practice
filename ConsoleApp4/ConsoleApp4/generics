1. Describe the problem generics address.
    generics allows us to design classes or methods but defer the specification of types until the class is declared.
    it prevents loose type safety and unwanted boxing.
2. How would you create a list of strings, using the generic List class?
    List<String> listString = new List<String>();
3. How many generic type parameters does the Dictionary class have?
    It has two. Dictionary<TInt, TString> for example.
4. True/False. When a generic class has multiple type parameters, they must all match.
    False
5. What method is used to add items to a List object?
    List<String> listString = new List<String>();
    String stringToAdd = "this need to be added";
    listString.Add(stringToAdd);
6. Name two methods that cause items to be removed from a List.
    1.remove(int index)
    2.pop(int index)
7. How do you indicate that a class has a generic type parameter?
    by using the <T> indicator after the construction of a certain class.
8. True/False. Generic classes can only have one generic type parameter.
    False
9. True/False. Generic type constraints limit what can be used for the generic type.
    True.
10. True/False. Constraints let you use the methods of the thing you are constraining to.
    True. one can use where.